layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
label.degree=radian.rescale(x=1:n, direction=-1, start=0),
edge.width=1,
edge.arrow.size=0.5)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
label.degree=radian.rescale(x=1:nrow(dat), direction=-1, start=0),
edge.width=1,
edge.arrow.size=0.5)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
vertex.label.degree=radian.rescale(x=1:nrow(dat), direction=-1, start=0),
edge.width=1,
edge.arrow.size=0.5)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
vertex.label.degree=radian.rescale(x=1:nrow(dat), direction=-15, start=0),
edge.width=1,
edge.arrow.size=0.5)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
vertex.label.degree=radian.rescale(x=1:nrow(dat), direction=-1, start=0),
edge.width=1,
edge.arrow.size=0.5)
View(dat)
install.packages("igraph")
install.packages("ggplot2")
install.packages("scales")
library(igraph)
library(ggplot2)
library(scales)
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
m=as.matrix(dat)
net=graph.adjacency(m,mode="directed",weighted=TRUE,diag=FALSE) #the only difference between this and the weighted network code is that mode="directed"
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=0.5)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=0.3)
radian.rescale <- function(x, start=0, direction=1) {
c.rotate <- function(x) (x + start) %% (2 * pi) * direction
c.rotate(scales::rescale(x, c(0, 2 * pi), range(x)))
}
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
vertex.label.degree=radian.rescale(x=1:nrow(dat), direction=-1, start=0),
edge.width=1,
edge.arrow.size=0.3)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
vertex.label.degree=radian.rescale(x=1:16, direction=-1, start=0),
edge.width=1,
edge.arrow.size=0.3)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
vertex.label.degree=radian.rescale(x=1:3, direction=-1, start=0),
edge.width=1,
edge.arrow.size=0.3)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=0.5)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.3),
edge.width=1,
edge.arrow.size=0.5)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=0.3)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=1)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex.main = 10,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=1)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 10,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=1)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 3,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=1)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 5,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=1,
edge.arrow.size=.6)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 7,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=2,
edge.arrow.size=.4)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 6,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=2,
edge.arrow.size=.4)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 5,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=2,
edge.arrow.size=.4)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 4.5,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=2,
edge.arrow.size=.4)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 3.5,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=2,
edge.arrow.size=.4)
plot.igraph(net,vertex.label=V(net)$name,
layout=layout.circle(net),
vertex.label.color="black",
vertex.label.cex = 3.2,
edge.color="black",
vertex.color = rgb(0,0,1,.5),
edge.width=2,
edge.arrow.size=.4)
hubwayTrips = read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
hubwayTrips = read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE) # read .csv file
hubwayTrips = read.csv(file.choose()) # read .csv file
hubwayTrips = read.csv(file.choose()) # read .csv file
hubwayTrips = read.csv("test_data.csv") # read .csv file
hubwayTrips = read.csv("test_data.csv") # read .csv file
dates = as.Date(hubwayTrips$starttime, "%m/%d/%Y %H:%M")
year = as.numeric(format(dates, "%Y"))
month = as.numeric(format(dates, "%m"))
month_string = as.s
hubwayTrips = read.csv(file.choose()) # read .csv file
View(hubwayTrips)
dates = as.Date(hubwayTrips$starttime, "%m/%d/%Y %H:%M")
year = as.numeric(format(dates, "%Y"))
month = as.numeric(format(dates, "%m"))
dates = as.Date(hubwayTrips$starttime, "%m/%d/%Y %H:%M")
year = as.numeric(format(dates, "%Y"))
month = as.numeric(format(dates, "%m"))
month_string = month.abb[month]
hubwayTrips$dates = as.Date(hubwayTrips$starttime, "%m/%d/%Y %H:%M")
hubwayTrips$year = as.numeric(format(dates, "%Y"))
hubwayTrips$month = as.numeric(format(dates, "%m"))
hubwayTrips$month_string = month.abb[month]
basic_summ = group_by(hubwayTrips, year, month, start.station.latitude, start.station.longitude)
library(dplyr)
basic_summ = group_by(hubwayTrips, year, month, start.station.latitude, start.station.longitude)
View(basic_summ)
View(basic_summ)
basic_summ = group_by(hubwayTrips, year)
basic_summ = group_by(hubwayTrips, year)
basic_summ = summarise(basic_summ,
sum_amount = sum(amount),
avg_ppo = mean(ppo),
avg_ppo2 = sum(price) / sum(amount))
basic_summ = summarise(basic_summ,
sum_amount = count(tripduration))
library(dplyr)
basic_summ = group_by(hubwayTrips, year, month, start.station.latitude, start.station.longitude)
basic_summ = summarise(basic_summ,
sum_amount = count(tripduration))
hubwayTrips = read.csv(file.choose()) # read .csv file
hubwayTrips$dates = as.Date(hubwayTrips$starttime, "%m/%d/%Y %H:%M")
hubwayTrips$year = as.numeric(format(dates, "%Y"))
hubwayTrips$month = as.numeric(format(dates, "%m"))
hubwayTrips$month_string = month.abb[month]
library(dplyr)
basic_summ = group_by(hubwayTrips, year, month, start.station.latitude, start.station.longitude)
basic_summ = summarise(basic_summ,
sum_amount = count(tripduration))
hubwayTrips = read.csv(file.choose()) # read .csv file
hubwayTrips = read.csv(file.choose()) # read .csv file
View(hubwayTrips)
View(hubwayTrips)
View(hubwayTrips)
hubwayTrips$dates = as.Date(hubwayTrips$starttime, "%m/%d/%Y %H:%M")
hubwayTrips$year = as.numeric(format(dates, "%Y"))
hubwayTrips$month = as.numeric(format(dates, "%m"))
hubwayTrips$dates = as.Date(hubwayTrips$starttime, "%m/%d/%Y %H:%M")
hubwayTrips$dates = as.Date(hubwayTrips$starttime, "%m/%d/%Y %H:%M")
hubwayTrips$year = as.numeric(format(hubwayTrips$dates, "%Y"))
hubwayTrips$month = as.numeric(format(hubwayTrips$dates, "%m"))
hubwayTrips$month_string = month.abb[hubwayTrips$month]
library(dplyr)
View(hubwayTrips)
View(hubwayTrips)
hubwayTrips = read.csv(file.choose()) # read .csv file
hubwayTrips = read.csv(file.choose()) # read .csv file
hubwayTrips = read.csv(file.choose()) # read .csv file
plot(plot_data)
install.packages("NISTunits", dependencies = TRUE);
library(NISTunits);
# loading file
safety_data = read.csv("safety_data.csv");
# Based on
# https://stackoverflow.com/a/365853/3128369
haversine <- function(data, lat1, lon1, lat2, lon2){
earthRadiusKm = 6371;
dLat = NISTdegTOradian(data[[lat2]]-data[[lat1]]);
dLon = NISTdegTOradian(data[[lon2]]-data[[lon1]]);
lat1 = NISTdegTOradian(data[[lat1]]);
lat2 = NISTdegTOradian(data[[lat2]]);
a = sin(dLat/2) * sin(dLat/2) +
sin(dLon/2) * sin(dLon/2) * cos(lat1) * cos(lat2);
c = 2 * atan2(sqrt(a), sqrt(1-a));
distance = earthRadiusKm * c;
return (distance);
}
safety_data[["haversine"]] = haversine(safety_data, "cetram_lat", "cetram_long", "latitude", "longitude")
# Making a basic plot of some potentially relevant variables
plot_data <- data.frame(
point_security = safety_data[["pointsecurity"]],
haversine = safety_data[["haversine"]],
gender = safety_data[["gender"]],
age = safety_data[["age"]],
companions = safety_data[["companions"]],
education = safety_data[["educational_attainment"]]
);
plot(plot_data)
safety_data = read.csv("safety_data.csv");
setwd("C:/Github/6.867-Machine-Learinng-in-transportation-safety-perception")
install.packages("NISTunits", dependencies = TRUE);
install.packages("NISTunits", dependencies = TRUE)
library(NISTunits);
safety_data = read.csv("safety_data.csv");
haversine <- function(data, lat1, lon1, lat2, lon2){
earthRadiusKm = 6371;
dLat = NISTdegTOradian(data[[lat2]]-data[[lat1]]);
dLon = NISTdegTOradian(data[[lon2]]-data[[lon1]]);
lat1 = NISTdegTOradian(data[[lat1]]);
lat2 = NISTdegTOradian(data[[lat2]]);
a = sin(dLat/2) * sin(dLat/2) +
sin(dLon/2) * sin(dLon/2) * cos(lat1) * cos(lat2);
c = 2 * atan2(sqrt(a), sqrt(1-a));
distance = earthRadiusKm * c;
return (distance);
}
safety_data[["haversine"]] = haversine(safety_data, "cetram_lat", "cetram_long", "latitude", "longitude")
plot_data <- data.frame(
point_security = safety_data[["pointsecurity"]],
haversine = safety_data[["haversine"]],
gender = safety_data[["gender"]],
age = safety_data[["age"]],
companions = safety_data[["companions"]],
education = safety_data[["educational_attainment"]]
);
plot(plot_data)
plot_data %<>%
mutate_if(is.integer,as.numeric)
library(dplyr)
install.packages("NISTunits", dependencies = TRUE);
install.packages("NISTunits", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE);
install.packages("dplyr", dependencies = TRUE)
install.packages("magrittr", dependencies = TRUE);
install.packages("magrittr", dependencies = TRUE)
plot_data %<>%
mutate_if(is.integer,as.numeric)
install.packages("NISTunits", dependencies = TRUE);
install.packages("dplyr", dependencies = TRUE);
install.packages("magrittr", dependencies = TRUE);
library(NISTunits);
# More data functions
library(dplyr)
# For the %<>% function
library(magrittr)
# loading file
safety_data = read.csv("safety_data.csv");
# Based on
# https://stackoverflow.com/a/365853/3128369
haversine <- function(data, lat1, lon1, lat2, lon2){
earthRadiusKm = 6371;
dLat = NISTdegTOradian(data[[lat2]]-data[[lat1]]);
dLon = NISTdegTOradian(data[[lon2]]-data[[lon1]]);
lat1 = NISTdegTOradian(data[[lat1]]);
lat2 = NISTdegTOradian(data[[lat2]]);
a = sin(dLat/2) * sin(dLat/2) +
sin(dLon/2) * sin(dLon/2) * cos(lat1) * cos(lat2);
c = 2 * atan2(sqrt(a), sqrt(1-a));
distance = earthRadiusKm * c;
return (distance);
}
safety_data[["haversine"]] = haversine(safety_data, "cetram_lat", "cetram_long", "latitude", "longitude")
# Making a basic plot of some potentially relevant variables
plot_data <- data.frame(
point_security = safety_data[["pointsecurity"]],
haversine = safety_data[["haversine"]],
gender = safety_data[["gender"]],
age = safety_data[["age"]],
companions = safety_data[["companions"]],
education = safety_data[["educational_attainment"]]
);
plot_data %<>%
mutate_if(is.integer,as.numeric)
plot(plot_data)
View(plot_data)
View(plot_data)
plot(plot_data, col=plot_data$point_security)
rbPal <- colorRampPalette(c('red','blue'))
R.Version()
plot_data$Col <- rbPal(10)[as.numeric(cut(plot_data$point_security,breaks = 10))]
plot(plot_data, col=plot_data$Col)
plot(plot_data, col=plot_data$Col)
plot(plot_data, col=plot_data$Col)
plot(plot_data, col=plot_data$Col)
safety_data[["haversine"]] = haversine(safety_data, "cetram_lat", "cetram_long", "latitude", "longitude")
safety_data = read.csv("safety_data.csv");
safety_data[["haversine"]] = haversine(safety_data, "cetram_lat", "cetram_long", "latitude", "longitude")
plot_data <- data.frame(
point_security = safety_data[["pointsecurity"]],
haversine = safety_data[["haversine"]],
gender = safety_data[["gender"]],
age = safety_data[["age"]],
companions = safety_data[["companions"]],
education = safety_data[["educational_attainment"]]
);
rbPal <- colorRampPalette(c('red','blue'))
plot_data$Col <- rbPal(10)[as.numeric(cut(plot_data$point_security,breaks = 10))]
plot(plot_data, col=plot_data$Col)
plot_data$Col <- rbPal(10)[as.numeric(cut(plot_data$point_security,breaks = 10))]
plot(plot_data, col=plot_data$Col)
summary(plot_data)
rbPal <- colorRampPalette(c('red','blue'))
plot_data$Col <- rbPal(10)[as.numeric(cut(plot_data$point_security,breaks = 10))]
safety_data = read.csv("safety_data.csv");
na.omit(safety_data$point_security)
safety_data = read.csv("safety_data.csv");
safety_data = read.csv("safety_data.csv");
safety_data[!is.na(safety_data$point_security),]
View(safety_data)
View(safety_data)
safety_data = read.csv("safety_data.csv");
safety_data[!is.na(safety_data$point_security),]
safety_data = read.csv("safety_data.csv");
safety_data[!is.na(safety_data$point_security),]
haversine <- function(data, lat1, lon1, lat2, lon2){
earthRadiusKm = 6371;
dLat = NISTdegTOradian(data[[lat2]]-data[[lat1]]);
dLon = NISTdegTOradian(data[[lon2]]-data[[lon1]]);
lat1 = NISTdegTOradian(data[[lat1]]);
lat2 = NISTdegTOradian(data[[lat2]]);
a = sin(dLat/2) * sin(dLat/2) +
sin(dLon/2) * sin(dLon/2) * cos(lat1) * cos(lat2);
c = 2 * atan2(sqrt(a), sqrt(1-a));
distance = earthRadiusKm * c;
return (distance);
}
safety_data[["haversine"]] = haversine(safety_data, "cetram_lat", "cetram_long", "latitude", "longitude")
plot_data <- data.frame(
point_security = safety_data[["pointsecurity"]],
haversine = safety_data[["haversine"]],
gender = safety_data[["gender"]],
age = safety_data[["age"]],
companions = safety_data[["companions"]],
education = safety_data[["educational_attainment"]]
);
summary(plot_data)
safety_data[!is.na(safety_data$point_security)]
safety_data[!is.na(safety_data$point_security),]
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
completeFun(safety_data, "point_security")
safety_data = read.csv("safety_data.csv");
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
completeFun(safety_data, "pointsecurity")
View(plot_data)
haversine <- function(data, lat1, lon1, lat2, lon2){
earthRadiusKm = 6371;
dLat = NISTdegTOradian(data[[lat2]]-data[[lat1]]);
dLon = NISTdegTOradian(data[[lon2]]-data[[lon1]]);
lat1 = NISTdegTOradian(data[[lat1]]);
lat2 = NISTdegTOradian(data[[lat2]]);
a = sin(dLat/2) * sin(dLat/2) +
sin(dLon/2) * sin(dLon/2) * cos(lat1) * cos(lat2);
c = 2 * atan2(sqrt(a), sqrt(1-a));
distance = earthRadiusKm * c;
return (distance);
}
safety_data[["haversine"]] = haversine(safety_data, "cetram_lat", "cetram_long", "latitude", "longitude")
plot_data <- data.frame(
point_security = safety_data[["pointsecurity"]],
haversine = safety_data[["haversine"]],
gender = safety_data[["gender"]],
age = safety_data[["age"]],
companions = safety_data[["companions"]],
education = safety_data[["educational_attainment"]]
);
summary(plot_data)
summary(plot_data)
rbPal <- colorRampPalette(c('red','blue'))
plot_data$Col <- rbPal(10)[as.numeric(cut(plot_data$point_security,breaks = 10))]
plot(plot_data, col=plot_data$Col)
library(NISTunits);
safety_data = read.csv("safety_data.csv");
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
completeFun(safety_data, "pointsecurity")
View(safety_data)
View(safety_data)
safety_data = completeFun(safety_data, "pointsecurity")
haversine <- function(data, lat1, lon1, lat2, lon2){
earthRadiusKm = 6371;
dLat = NISTdegTOradian(data[[lat2]]-data[[lat1]]);
dLon = NISTdegTOradian(data[[lon2]]-data[[lon1]]);
lat1 = NISTdegTOradian(data[[lat1]]);
lat2 = NISTdegTOradian(data[[lat2]]);
a = sin(dLat/2) * sin(dLat/2) +
sin(dLon/2) * sin(dLon/2) * cos(lat1) * cos(lat2);
c = 2 * atan2(sqrt(a), sqrt(1-a));
distance = earthRadiusKm * c;
return (distance);
}
safety_data[["haversine"]] = haversine(safety_data, "cetram_lat", "cetram_long", "latitude", "longitude")
plot_data <- data.frame(
point_security = safety_data[["pointsecurity"]],
haversine = safety_data[["haversine"]],
gender = safety_data[["gender"]],
age = safety_data[["age"]],
companions = safety_data[["companions"]],
education = safety_data[["educational_attainment"]]
);
summary(plot_data)
rbPal <- colorRampPalette(c('red','blue'))
plot_data$Col <- rbPal(10)[as.numeric(cut(plot_data$point_security,breaks = 10))]
plot(plot_data, col=plot_data$Col)
plot(plot_data, col=plot_data$point_security)
plot(plot_data, col=plot_data$point_security)
